/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  JobPosting as PrismaJobPosting,
  Application as PrismaApplication,
} from "@prisma/client";

export class JobPostingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.JobPostingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.jobPosting.count(args);
  }

  async jobPostings<T extends Prisma.JobPostingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.JobPostingFindManyArgs>
  ): Promise<PrismaJobPosting[]> {
    return this.prisma.jobPosting.findMany<Prisma.JobPostingFindManyArgs>(args);
  }
  async jobPosting<T extends Prisma.JobPostingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.JobPostingFindUniqueArgs>
  ): Promise<PrismaJobPosting | null> {
    return this.prisma.jobPosting.findUnique(args);
  }
  async createJobPosting<T extends Prisma.JobPostingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.JobPostingCreateArgs>
  ): Promise<PrismaJobPosting> {
    return this.prisma.jobPosting.create<T>(args);
  }
  async updateJobPosting<T extends Prisma.JobPostingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.JobPostingUpdateArgs>
  ): Promise<PrismaJobPosting> {
    return this.prisma.jobPosting.update<T>(args);
  }
  async deleteJobPosting<T extends Prisma.JobPostingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.JobPostingDeleteArgs>
  ): Promise<PrismaJobPosting> {
    return this.prisma.jobPosting.delete(args);
  }

  async findApplications(
    parentId: string,
    args: Prisma.ApplicationFindManyArgs
  ): Promise<PrismaApplication[]> {
    return this.prisma.jobPosting
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .applications(args);
  }
}
