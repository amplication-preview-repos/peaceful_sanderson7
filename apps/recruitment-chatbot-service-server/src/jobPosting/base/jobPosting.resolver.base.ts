/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { JobPosting } from "./JobPosting";
import { JobPostingCountArgs } from "./JobPostingCountArgs";
import { JobPostingFindManyArgs } from "./JobPostingFindManyArgs";
import { JobPostingFindUniqueArgs } from "./JobPostingFindUniqueArgs";
import { CreateJobPostingArgs } from "./CreateJobPostingArgs";
import { UpdateJobPostingArgs } from "./UpdateJobPostingArgs";
import { DeleteJobPostingArgs } from "./DeleteJobPostingArgs";
import { ApplicationFindManyArgs } from "../../application/base/ApplicationFindManyArgs";
import { Application } from "../../application/base/Application";
import { JobPostingService } from "../jobPosting.service";
@graphql.Resolver(() => JobPosting)
export class JobPostingResolverBase {
  constructor(protected readonly service: JobPostingService) {}

  async _jobPostingsMeta(
    @graphql.Args() args: JobPostingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JobPosting])
  async jobPostings(
    @graphql.Args() args: JobPostingFindManyArgs
  ): Promise<JobPosting[]> {
    return this.service.jobPostings(args);
  }

  @graphql.Query(() => JobPosting, { nullable: true })
  async jobPosting(
    @graphql.Args() args: JobPostingFindUniqueArgs
  ): Promise<JobPosting | null> {
    const result = await this.service.jobPosting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JobPosting)
  async createJobPosting(
    @graphql.Args() args: CreateJobPostingArgs
  ): Promise<JobPosting> {
    return await this.service.createJobPosting({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => JobPosting)
  async updateJobPosting(
    @graphql.Args() args: UpdateJobPostingArgs
  ): Promise<JobPosting | null> {
    try {
      return await this.service.updateJobPosting({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobPosting)
  async deleteJobPosting(
    @graphql.Args() args: DeleteJobPostingArgs
  ): Promise<JobPosting | null> {
    try {
      return await this.service.deleteJobPosting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Application], { name: "applications" })
  async findApplications(
    @graphql.Parent() parent: JobPosting,
    @graphql.Args() args: ApplicationFindManyArgs
  ): Promise<Application[]> {
    const results = await this.service.findApplications(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
